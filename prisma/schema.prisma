generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Access {
  id         Int         @id @default(autoincrement())
  slug       String      @db.VarChar(100)
  name       String      @db.VarChar(100)
  UserAccess UserAccess?
}

model UserAccess {
  userId   Int    @unique
  accessId Int    @id
  Access   Access @relation(fields: [accessId], references: [id])
  User     User   @relation(fields: [userId], references: [id])
}

model Profile {
  id             Int       @id @default(autoincrement())
  firstName      String?   @db.VarChar(30)
  lastName       String?   @db.VarChar(30)
  patronymicName String?   @db.VarChar(30)
  dateOfBirth    DateTime?
  userId         Int       @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  User           User      @relation(fields: [userId], references: [id])
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String      @unique
  isBlocked  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  Calendar   Calendar[]
  Profile    Profile?
  Sale       Sale[]
  UserAccess UserAccess?
}

model Category {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(100)
  slug             String           @unique @db.VarChar(100)
  createdAt        DateTime         @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime         @default(now()) @updatedAt
  parentId         Int?
  parentCategory   Category?        @relation("CategoryToCategory", fields: [parentId], references: [id])
  childrenCategory Category[]       @relation("CategoryToCategory")
  ProductCategory  ProductCategory?
  ProductTag       ProductTag[]
}

model Product {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  slug                  String                  @unique @db.VarChar(255)
  image                 String?                 @db.VarChar(255)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  description           String
  ProductCategory       ProductCategory?
  ProductCharacteristic ProductCharacteristic[]
  ProductShop           ProductShop[]
  ProductTag            ProductTag[]
  ProductType           ProductType[]
  SalesProduct          SalesProduct[]
}

model ProductCategory {
  productId  Int      @unique
  categoryId Int      @unique
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model ProductType {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  slug        String  @unique @db.VarChar(100)
  image       String? @db.VarChar(255)
  price       Float
  productId   Int
  description String
  product     Product @relation(fields: [productId], references: [id])
}

model Characteristic {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(100)
  slug                  String                  @unique @db.VarChar(100)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  ProductCharacteristic ProductCharacteristic[]
}

model ProductCharacteristic {
  productId        Int
  characteristicId Int
  description      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  characteristic   Characteristic @relation(fields: [characteristicId], references: [id])
  product          Product        @relation(fields: [productId], references: [id])

  @@id([characteristicId, productId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  slug      String   @unique @db.VarChar(100)
  color     String   @default("#000000") @db.VarChar(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTag {
  productId Int
  tagId     Int
  product   Product  @relation(fields: [productId], references: [id])
  tag       Category @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model Shop {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(150)
  slug        String        @unique @db.VarChar(150)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Calendar    Calendar[]
  ProductShop ProductShop[]
  Sale        Sale[]
  ShopAddress ShopAddress?
}

model ShopAddress {
  id        Int       @id @default(autoincrement())
  address   String    @db.VarChar(255)
  lat       Float?
  lon       Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  shopId    Int       @unique
  Shop      Shop      @relation(fields: [shopId], references: [id])
}

model ProductShop {
  shopId    Int
  productId Int
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  Shop      Shop     @relation(fields: [shopId], references: [id])

  @@id([shopId, productId])
}

model Sale {
  id           Int            @id @default(autoincrement())
  userId       Int
  shopId       Int
  comment      String?        @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Shop         Shop           @relation(fields: [shopId], references: [id])
  User         User           @relation(fields: [userId], references: [id])
  SalesProduct SalesProduct[]
}

model SalesProduct {
  saleId    Int
  productId Int
  count     Int
  price     Float
  Product   Product @relation(fields: [productId], references: [id])
  Sale      Sale    @relation(fields: [saleId], references: [id])

  @@id([saleId, productId])
}

model TypeDay {
  id       Int        @id @default(autoincrement())
  title    String     @db.VarChar(100)
  slug     String     @unique @db.VarChar(100)
  message  String
  Calendar Calendar[]
}

model Calendar {
  id        Int      @id @default(autoincrement())
  date      DateTime
  userId    Int
  shopId    Int?
  typeDayId Int
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  TypeDay   TypeDay  @relation(fields: [typeDayId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Log {
  id      Int      @id @default(autoincrement())
  model   String
  modelId Int
  action  String
  userId  Int
  ip      String
  date    DateTime @default(now())
}
